package Ejemplo1;

import java_cup.runtime.*;

parser code {:

/***********
SymbolFactory es una nueva caracteristica que ha sido añadida a las version 11a de cup, la cual facilita la implementacion de clases Symbol personalizadas, esto debido a que dicha clase no provee mucha información de contexto que podria ser util para el analisis semantico o ayudar en la construccion del AST


Mas informacion en: http://4thmouse.com/index.php/2007/02/15/using-custom-symbols-in-cup/
***********/

	public static void main(String args[]) throws Exception {

		SymbolFactory sf = new DefaultSymbolFactory();
		if (args.length==0) 
			new parser(new Scanner(System.in,sf),sf).parse();
		else 
			new parser(new Scanner(new java.io.FileInputStream(args[0]),sf),sf).parse();
	}

:}

terminal IGUAL, SUMA, POR, PARENTIZQ, PARENTDER;
terminal Integer NUMERO;

non terminal sesion, ecuacion;
non terminal Integer expr;

precedence left SUMA;
precedence left POR;

sesion ::= sesion ecuacion | ecuacion;
ecuacion ::= expr:ex {: System.out.println(" = "+ex); :} IGUAL;
expr      ::= NUMERO:n
	      {: RESULT=n; :}
            | expr:izq SUMA expr:der
	      {: RESULT=new Integer(izq.intValue() + der.intValue()); :}
	    | expr:izq POR expr:der
	      {: RESULT=new Integer(izq.intValue() * der.intValue()); :}
	    | PARENTIZQ expr:ex PARENTDER
	      {: RESULT=ex; :}
	    ;
